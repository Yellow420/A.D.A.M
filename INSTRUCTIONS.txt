
First Use:

When you initially launch ADAM, it identifies an empty Wake-Word list and automatically begins setting up a new user profile. After a brief introduction where you introduce yourself, ADAM memorizes your voice and saves your profile. Following this, ADAM prompts the creation of a bot profile. During this step, you personalize your assistant by giving it a name, defining its personality, selecting a default voice, and specifying its appearance. Once the bot profile is saved, the newly named assistant is added to the Wake-Word list, indicating its readiness to start listening and engaging in conversation. The bot is equipped to converse, answer queries, and execute commands seamlessly.

Commands:

Basic Commands:
ADAM comes with a set of predefined commands stored in the COMMANDS list I want to limit the predefined commands to core functionality so that users pick and choose their commands based on system and preference. Each command consists of trigger phrases paired with associated actions. When interacting with ADAM, it scans your spoken phrases for matches with these trigger phrases. If a match is found, ADAM executes the corresponding action.

Custom Commands:
Users have the option to define custom commands by creating and importing their own mods. Custom commands are crafted in separate Python files and placed within a designated directory. These commands follow a similar structure to the predefined ones, with trigger phrases and associated actions. ADAM dynamically imports these custom commands, incorporating them into the command execution process.

Shortcuts:

ADAM also recognizes shortcuts based on spoken text. Shortcuts offer a streamlined method to quickly access applications, files, or perform actions without the need for complex commands.

Setting Up Shortcuts:

Creation Process: Define shortcuts by creating files or folders with designated names representing the desired actions.

Location: Place these shortcut files or folders within the "COMMANDS" folder located in the "Mods" directory.

Flexibility: Organize the "COMMANDS" folder according to preferences, allowing for simplicity or complexity. Users can create nested folders or drop shortcuts directly into the base "COMMANDS" directory.

Execution of Shortcuts:

Speech Recognition: When users speak phrases matching shortcut names, ADAM scans the "COMMANDS" folder to identify these shortcuts.

Triggering Actions: Upon detecting a match, ADAM automatically triggers the associated action defined by the shortcut, such as opening an application or executing a file.

User Interaction:

Simple Usage: Utilizing shortcuts is straightforward â€“ users only need to speak the trigger phrases associated with the shortcuts or mention their names during interactions with ADAM.

Processing Speech: ADAM processes the user's speech, matching it against predefined commands, custom commands, and shortcuts. If a match is found, ADAM executes the corresponding action or opens the relevant file or folder.

Benefits and Advantages:

Flexibility and Customization: Shortcuts offer flexibility, allowing users to configure ADAM according to unique needs and workflow preferences.

Efficiency and Productivity: Shortcuts enhance efficiency by providing quick access to frequently used applications or actions, boosting productivity in user interactions.

Simplicity for Non-Programmers: Shortcuts are intuitive, accessible even to users with minimal programming experience, enabling effortless expansion of ADAM's functionality.

Usage:

To leverage ADAM's command execution system, simply articulate your commands or mention shortcut names. ADAM processes your speech, executing the relevant actions upon identifying a match.

Customization:

Users are encouraged to customize and expand ADAM's capabilities by defining custom commands and shortcuts. This versatility empowers users to introduce new commands tailored to their specific needs or define shortcuts for swift access to preferred files or folders. The flexibility offered by ADAM allows users to personalize their experience, enhancing utility and efficiency.

Official Release:

When I am satisfied with it and every bug is found and fixed I will make an official release. With ADAM's official release, a comprehensive list of predefined commands and a detailed guide on creating custom mods will be provided. Additionally, users can inquire about available commands by asking a bot "what can you do?" Furthermore, when mods are imported, they can be designated for global use or specific to individual users. A dedicated website will be established to facilitate the sharing of user-made mods. The predefined command set will focus on core functionality, enabling users to customize ADAM's capabilities based on their preferences and system requirements.

Lockdown Functionality:

Unless lockdown is enabled, new user profiles will be created automatically for any unrecognized user initiating conversation with a bot. The command "build a bot" triggers the creation of another assistant bot, irrespective of lockdown status. Bots marked with a lock symbol will exclusively engage with their creators, accepting commands and participating in conversation solely with their assigned users.

Idle Chat Settings:

Users can manage idle chat settings by issuing the command "idle chat settings," enabling or disabling idle mode and adjusting frequency settings. This feature allows bots to engage in conversational exchanges autonomously.

Response Mechanism:

Following a user's query, ADAM remains attentive for 10 seconds, anticipating further interaction. If the user speaks within this timeframe without using a wake word, ADAM assumes continued engagement with the same assistant. After the 10-second window elapses, ADAM returns to listening for a wake word, refraining from response until its name is mentioned.

